#!/usr/bin/env perl
use strict;
use warnings;
use Carp;
use List::MoreUtils qw|all uniq|;
use File::Temp qw|tempdir|;
use File::Path qw|make_path|;
use Getopt::Euclid;

unless(all { "$ARGV{'--input'}.$_" } qw|bim bed fam|) {
	croak "Not all input files can be found!";
}

# Test if data contain family sample
my $famflag;
{
	my %fiid;
	open my $fped, "$ARGV{'--input'}.fam" or die "Cannot open fam file for reading";
	while(<$fped>) {
		my ($fid, $iid) = (split)[0,1];
		$fiid{$fid,$iid} = 1;
	}
	open $fped, "$ARGV{'--input'}.fam" or die "Cannot open fam file for reading";
	while(<$fped>) {
		my ($fid, $iid, $dad, $mom) = (split)[0,1,2,3];
		if ($dad ne '0' && defined $fiid{$fid,$dad}) {
			$famflag = 1;
			last;
		}
		if ($mom ne '0' && defined $fiid{$fid,$mom}) {
			$famflag = 1;
			last;
		}
	}
}


# This script use SNP ID as the unique key, need to check uniqueness first.
open my $fin, "$ARGV{'--input'}.bim" or die "Cannot open bim file for reading";
my @mkid;
while(<$fin>) {
	my $snpname = (split)[1];
	push @mkid, $snpname;
}
my @mkiduq = uniq sort @mkid;
if (@mkid != @mkiduq) {
	croak "Non-unique marker ID found in the $ARGV{'--input'}.bim";
}

my $plink = "plink --bfile $ARGV{'--input'}";
if ($ARGV{'--remove'}) {
	croak "Cannot find remove sample list" unless -f $ARGV{'--remove'};
	$plink .= " --remove $ARGV{'--remove'}";
}

my $wrkdir;
if ($ARGV{'--wrkdir'}) {
	$wrkdir = $ARGV{'--wrkdir'};
	make_path $wrkdir unless -d $wrkdir;
}
else {
	$wrkdir = tempdir(CLEANUP => 1);
}

# Execute command
system(<<EOF
$plink --missing --out $wrkdir/plink
$plink --hardy   --out $wrkdir/plink
$plink --freq    --out $wrkdir/plink
EOF
);

if ($famflag) {
	system(qq|$plink --mendel --mendel-duos  --out $wrkdir/plink|);
}

# check if HH file exists
my %hh;
if (-f "$wrkdir/plink.hh") {
  my $fhh = IO::File->new("$wrkdir/plink.hh");
  while (<$fhh>) {
	$hh{(split)[2]} ++;
  }
  my $fhhcount = IO::File->new("$wrkdir/plink.hhcount","w");
  print $fhhcount "SNP\tHH_COUNT\n";
  foreach my $rsid (keys %hh) {
	print $fhhcount "$rsid\t$hh{$rsid}\n";
  }
}

# Merge summary statistics using R
my $fs = IO::File->new("$wrkdir/merge.R", "w");
print $fs <<EOF;
pos <- read.table("$ARGV{'--input'}.bim", header=F)
pos <- pos[,c(1,4,2)]
colnames(pos) <-c("CHR","POS","SNP")

freq <- read.table("$wrkdir/plink.frq",header=T)
freq <- freq[,c("SNP","A1","A2","MAF")]

final <- merge(pos, freq)
rm(list=c("pos","freq"))

lmiss <- read.table("$wrkdir/plink.lmiss",header=T)
lmiss <- lmiss[,c("SNP","F_MISS")]

final <- merge(final, lmiss)
rm("lmiss")

hwe <- read.table("$wrkdir/plink.hwe",header=T, as.is=TRUE)
hwe_test<-unique(hwe\$TEST)
if(length(hwe_test)==3 && all(c("ALL", "AFF", "UNAFF") %in% hwe_test)) {
	hwe.flat <- data.frame(SNP=unique(hwe\$SNP),
        unstack(hwe,P~TEST)[,c("ALL","AFF","UNAFF")])
    names(hwe.flat) <- c("SNP","HWE","CASE_HWE","CTRL_HWE")
} else if (length(hwe_test)==1 && hwe_test[1] == "ALL(NP)") {
	hwe.flat <- hwe[,c("SNP","P")]
	names(hwe.flat) <- c("SNP", "HWE")
}


final <- merge(final, hwe.flat)
rm(list=c("hwe", "hwe.flat"))

if (file.exists("$wrkdir/plink.hhcount")) {
	hhcount <- read.table("$wrkdir/plink.hhcount", header=T)
	final <- merge(final, hhcount, by="SNP", all.x=TRUE)
}

if (file.exists("$wrkdir/plink.lmendel")) {
	mendel <- read.table("$wrkdir/plink.lmendel", header=T)
	names(mendel)[3]<-"MENDEL"
	final <- merge(final, mendel, all.x=TRUE)
}

EOF

if ($ARGV{'--duperr'}) {
	print $fs <<EOF;
if (file.exists("$ARGV{'--duperr'}")) {
	duperr <- read.table("$ARGV{'--duperr'}", header=T)
	final <- merge(final, duperr, all.x=TRUE)
}

EOF
}

print $fs <<EOF;

write.table(final, file="$ARGV{'--output'}", quote=FALSE, row.names=FALSE, sep="\\t")

EOF

$fs->close;
system("Rscript $wrkdir/merge.R") unless $ARGV{'--dry'};


__END__

=head1 NAME

create_snp_qc_stats.pl -- Create SNP level QC statistics

=head1 REQUIRED ARGUMENTS

=over

=item -[-]in[put] [=] <prefix>

Input file prefix.

=item -[-]out[put] [=] <outprefix>

Output file name.


=back

=head1 OPTIONS

=over

=item -[-]wrkdir [=] <wrkdir>

Working directory name, to store intermediate results.

=item -[-]duperr [=] <duperr_summary>

Duplication discordance summary file, generated by plink_dup_discord.pl.

=item -[-]remove [=] <remove>

List of samples to be excluded when calculating summary stats.
Should be the same as plink removal list file.

=item -[-]dry

Do not execute the R script.

=back
