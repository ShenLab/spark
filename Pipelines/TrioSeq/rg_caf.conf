# Specify variant table and define variant class to be included to calculate CAF
[Variant]
# We can override variant table from commmand line
# Only one variant table is allowed for CAF calculation
# If the table path is a directory, we will run the script in parallel to process each table
# found in the directory
Table=/Path/To/Variant/Table.txt

# Sample ID will be used to determine unique samples
SampID=IID

# Overall site level hard filter, can be derived from QC steps
# Only one single filtering expression is allowed, so it can be long
Filter='DP>=15 & (GENO == "Het" & AB.ALT>0.25 & AB.ALT<0.75 & GQ>=30 | GENO == "HomAlt" & AB.ALT>0.9 & GQ>=30) & (ExAC03_ALL == "." | ExAC03_ALL<0.001) & (gnomAD211exome_ALL == "." | gnomAD211exome_ALL<0.001)'
SNV_Filter='MQ>40 & SOR<3'
Indel_Filter='SOR<6'

# In case of duplicated samples or twins in the entry, specify the action from "Any,All,First"
DupAction=Any

# Additional filters based on family events
# For example, we can require the rare allele should not appear in unrelated family members
# Otherwise, it may be shared artifacts that we don't want to add to CAF
# It can also be explained by cryptic relatedness, so it becomes conservative to exclude them 
# One or multiple filters can be specified here, each must be accompnied by an "_Cond"
# Condition can be "Any,All,None"
FamFilter='(Relation=~"^Wife" | Relation=~"^Husband") & (GENO=="Het" | GENO=~"Alt")'
FamFilter_Cond=None

# A list of bad variants to be removed
# It can have two columns: IID, VarID, or one column: VarID
Exclue=BadVariants.txt

# Filter to keep variants in the regions of interest
# Region file will be in UCSC BED format
Region=Callable.bed

# Definition of variant classes
# All variant class must be associated with genes for tallying CAF
# Note: we do not remove nearby variants as in dnv_burden or rarevar_burden
Class=LoF
Class_Filter='GeneEff=="stop_gained" | GeneEff=~"splice_(acceptor|donor)" | GeneEff=="stop_gained"'
Class=LoF+Dmis_MPC2
Class_Filter='GeneEff=="stop_gained" | GeneEff=~"splice_(acceptor|donor)" | GeneEff=="stop_gained" | GeneEff=="missense" & MPC!="." & MPC>=2.0'
Class=LoF+Dmis_CADD25
Class_Filter='GeneEff=="stop_gained" | GeneEff=~"splice_(acceptor|donor)" | GeneEff=="stop_gained" | GeneEff=="missense" & CADD13!="." & CADD13>=25.0'
Class=Silent
Class_Filter='GeneEff=="synonymous" | GeneEff=="start_retained" | GeneEff=="stop_retained"'


# Specify how do we resolve phase of multiple variants in the same gene of the same person
# Note: we do not attempt to phase directly on VCF, because it will soon become over-complicated
# because you will need to deal with complex multialleic variants
[Phase]
# We need a filter to distinguish Het from Hom genotypes, it seems fool-proof
# but we may have to deal with more complex situation as half-missing genotypes in some VCFs
HetFilter='GENO=="Het"'
HetFilter_DupAction=Any
# Homozygotes will contribute two copies toward CAF, and we don't need to resolve the phase
# We will treat all genotypes that failed HetFilter as Hom if there is no HomFilter. 
HomFilter='GENO=="HomAlt"'
HomFilter_DupAction=Any

# The following filters are used to determine if two heterozygotes are on different haplotypes ("repulse phase")
# Fields for family members will be expanded for each site:
# "FamMembers, Relations, Phenotypes, GENO.FamMembers, AB.REF.FamMembers,AB.ALT.FamMembers
#  AD.REF.FamMembers,AD.ALT.FamMembers,DP.FamMembers,GQ.FamMembers"
# will be expanded to an array of
# (IID, Relation, Pheno, AB.REF, AB.ALT, AD.REF, AD.ALT, DP, GQ)
# Then for this filter, field names for two sites will be combined as
# (IID.1, Relation.1, Pheno.1, AB.REF.1, AB.ALT.1, AD.REF.2, AD.ALT.1, DP.1, GQ.1
#  IID.2, Relation.2, Pheno.2, AB.REF.2, AB.ALT.2, AD.REF.2, AD.ALT.2, DP.2, GQ.2)
# "Repulse" filter specify one more multiple rules that can be applied to a pair 
Repulse="Relation.1=='Son' & GENO.1=='Het' & Relation.2=='Son' & GENO.2=='HomRef'"
Repulse="Relation.1=='Daughter' & GENO.1=='Het' & Relation.2=='Daughter' & GENO.2=='HomRef'"
Repulse="Relation.1=='2ndSon' & GENO.1=='Het' & Relation.2=='2ndSon' & GENO.2=='HomRef'"
Repulse="Relation.1=='2ndDaughter' & GENO.1=='Het' & Relation.2=='2ndDaughter' & GENO.2=='HomRef'"

# If two variants pass any one of the filter above, they will be classified as in "Repulse" status, 
# otherwise, they will be considered as "Couple" status.
# So this may be conservative, but it will be fine if it is matched by the way compound het is defined in child 


[Sample]
# Sample table
# Sample size (after excluding bad samples) and will be used as denominator when calculating CAF
# The CAF is calculated among all parents, so we do not need to define sample groups
# Yet sample table can still useful for sample filtering  
Table=/path/to/samp/table.txt
# E.g. keep only parantal samples with predicted European ancestry
Filter="Role=~'Father|Mother' & ProbEUR>0.8"

# Sample ID field in the table used to link Sample IDs in the variant table
SampID=IID

# A list of bad samples to be excluded from analysis (e.g. one of cryptic related pair)
Exclude=BadSamps.txt
# A list of good samples to be included.
Include=GoodSamps.txt
# Remove some family members from family-based filter or in determinig phase
FamExclude=ExclFamAnalysis.txt

# Sample size. When sample table is specified, it is used to validate the sample table
# after applying sample filter and inclusion/exclusion list
# When sample table is not available, it should be no less than the observed number of samples 
# from variant table, and this is the sample size for CAF calculation
# Currently we do not consider chrX for recessive analysis, so we do not need sample size for male/female
Size=1000


# Output CAF table
[Output]
# We will have one column for CAF of each variant class name after variant class labels defined above.
# The following prefix will be added to each CAF field.
FieldPref=CAF_
# External reference for additional gene level information
GXref=/home/xz2680/Dropbox/Data/GENCODE/GencodeV19GeneTable_HGNC20180722.txt
GXref_Fields=EnsemblID,HGNC
GXref=/home/xz2680/Dropbox/Data/GeneMetrics/ExAC_r0.3.txt
GXref_Fields=GeneID,pLI

[Parallel]
jobs=4


