#
# Config for analyzing the burden of rare variants
#
[Variant]
# Variant table should be the output from var_filter + anno_seqvar pipeline.
# If family-based filter or family events are used, the variant table should include related columns about 
# FamMembers and their genotypes.
# It is possible to have multipe input tables, they will be subject to the  same filtering steps below.
# The variants from the same individual should all appear in one variant table.
Table=RaraVarsTable.txt


# Sample ID will be used to link sample information for defining subgroups of samples
SampID=IID

# A list of bad variants to be removed
# It can have two columns: IID, VarID, or one column: VarID
Exclue=BadVariants.txt

# Overall site level hard filter, typically for QC purpose
# The main filter
Filter='GENO=="Het" & DP>=15 & AB.ALT>0.25 & AB.ALT<0.75 & GQ>=30 & (ExAC03_ALL == "." | ExAC03_ALL<0.001) & (gnomAD211exome_ALL == "." | gnomAD211exome_ALL<0.001)'
# Additional filters for SNVs and indels
# When variant type specific filters are provided, a variant must pass both the main filter and variant-specific filter
SNV_Filter='MQ>=40 & ReadPosRankSum>-8 & SOR<3.0'
Indel_Filter='SOR<6.0'
# In case of duplicated samples or twins in the enrry, specify the action from "Any,All,First"
DupAction=Any

# When information about family members is available, each row of the variant will be expanded
# For example, the following fields
# "FamMembers, Relations, Phenotypes, GENO.FamMembers, AB.REF.FamMembers,AB.ALT.FamMembers
#  AD.REF.FamMembers,AD.ALT.FamMembers,DP.FamMembers,GQ.FamMembers"
# will be expanded to an array of
# (IID, [Relation]<-this is the new field, Pheno, AB.REF, AB.ALT, AD.REF, AD.ALT, DP, GQ)
# Original sample fields will be kept, and if the name (Field) conflicts with the expanded field name from family member
# they will changed be come (_Field)   
# Then the expression below represents a transmission event
# Relation=="Son" & Phenotype == "Affected" & GENO == "Het" <-- transmitted to affected son
# 

# Information about family members are used in following two ways
# 1. We can have additional filters based on the genotypes of family members
# For example, we require the rare allele should not appear in unrelated family members
# One or multiple filters can be specified here, each must be accompnied by a 
# Condition can be one of "Any,All,None,Notall,One"
FamFilter='(Relation=~"^Wife" | Relation=~"^Husband") & (GENO=="Het" | GENO=~"Alt")'
FamFilter_Cond=None
# Another example, we require rare variants be inherited from parents
FamFilter='(Relation=="Father" | Relation=="Mother") & GENO=="Het"'
FamFilter_Cond=Any
# If no family member is available, the filter will not be used.

# 2. We can define events observed among family members
# The events will be tallied together with variants and appear in the summary and gene table
FamEvent=Trans
FamEvent_Filter='Relation=~"^(\d*1st|\d*2nd|\d*3rd|\d*[^12]th)?(Son|Daughter)$" & (GENO=="Het" | GENO=="HemiAlt")'
FamEvent=Trans2Aff
FamEvent_Filter='Relation=~"^(\d*1st|\d*2nd|\d*3rd|\d*[^12]th)?(Son|Daughter)$" & Pheno=="Affected" & (GENO=="Het" | GENO=="HemiAlt")'
FamEvent=Trans2Unaff
FamEvent_Filter='Relation=~"^(\d*1st|\d*2nd|\d*3rd|\d*[^12]th)?(Son|Daughter)$" & Pheno=="Unaffected" & (GENO=="Het" | GENO=="HemiAlt")'
FamEvent=Trans2Son
FamEvent_Filter='Relation=~"^(\d*1st|\d*2nd|\d*3rd|\d*[^12]th)?Son$" & (GENO=="Het" | GENO=="HemiAlt")'
FamEvent=Trans2Daughter
FamEvent_Filter='Relation=~"^(\d*1st|\d*2nd|\d*3rd|\d*[^12]th)?Daughter$" & (GENO=="Het" | GENO=="HemiAlt")'
FamEvent=NonTrans
FamEvent_Filter='Relation=~"^(\d*1st|\d*2nd|\d*3rd|\d*[^12]th)?(Son|Daughter)$" & (GENO!="Het" & GENO!="HemiAlt")'

# For family-based filter, family member info will be expanded from packed values
# The field names will also be changed to remove FamMembers suffix
# Field names for the original sample will be kept, and in case of conflict with family member's field
# an underscore will be added to the field name.

# Regions of interest in UCSC BED format
# Only variants within the given genomic regions will be counted
# For case-control comparison, it is useful to restrict the analysis 
# to the common callable regions.
Region=Callable.bed

# Variant classes
# Similar to dnv_burden, we need an modifer after each variant class label
# They will be used to determine variant class in the presence of multiple overlapping genes
# Order matters!
# The order of variant classes defined here determine the priority level when removing variants 
# from nearby varinat cluster (see DistCutoff option below).
Class=LoF:Any
Class_Filter='GeneEff=~"splice_(acceptor|donor)" | GeneEff=="frameshift" | GeneEff=="stop_gained" | GeneEff=="protein_altering"'
Class=Dmis_MPC2:Any
Class_Filter='GeneEff=="missense" & MPC!="." & MPC>=2.0'
Class=Dmis_CADD25:Any
Class_Filter='GeneEff=="missense" & CADD13!="." & CADD13>=25.0'
Class=Missense:Any
Class_Filter='GeneEff=="missense"'
Class=SpliceReg:All
Class_Filter='GeneEff=="splice_region"'
Class=Silent:All
Class_Filter='GeneEff=="synonymous" | GeneEff=="start_retained" | GeneEff=="stop_retained"'
Class=SilentOrNC:All
Class_Filter='GeneEff=="." | GeneEff=="synonymous"'

# Specify variant classes that are not associated with genes
ClassWoGene=SilentOrNC


# For each individual, we will only pick up one rare variant that passed filters and having the most severe 
# effect among those nearby variants in the same gene.
# To enable this function, we will create a temp variant table file sorted by sample ID first then by chrom/position.
# The function will be disabled under calibration mode to save computing time.
# This filter aims to remove nearby variants that are likely on the same haplotype
# Recommended for ultra-rare variants in burden analysis
DistCutoff=50

# Family information is also used in phasing nearby variants.
# We can restrict the removal of nearby variants to those that on the same haplotypes
# To do this, provide a series of "Repulse filters", variants that matched one of these filters will be on different
# chromosomes (repulse phase) and will not be considered for removal even if they are close to each other 
Repulse="Relation.1=='Son' & GENO.1=='Het' & Relation.2=='Son' & GENO.2=='HomRef'"
Repulse="Relation.1=='Daughter' & GENO.1=='Het' & Relation.2=='Daughter' & GENO.2=='HomRef'"
Repulse="Relation.1=='2ndSon' & GENO.1=='Het' & Relation.2=='2ndSon' & GENO.2=='HomRef'"
Repulse="Relation.1=='2ndDaughter' & GENO.1=='Het' & Relation.2=='2ndDaughter' & GENO.2=='HomRef'"

# Data used in the repulse filter will be all pairs of family member
# field name will be family member fields removing .FamMembers suffix and adding .1 or .2 suffix.

# Note on signifiacnce evaluation.
# In this pipeline, we define "family events" for each variant-sample combination e.g. if it istransmitted or not transmitted
# to affected offspring. Whem muliple variants are present on the same haplotype, they will likely to have the same
# events because of genetic linkage. So a simple binomial test of trans vs non-trans against 0.5 chance may over-estimate the
# signifiacne if genetic linkage is not accounted for. To alleivate this issue, we can instead count the uniq number of sample
# chromosome combinations for each variant class - sample group - gene set configuration.
# This can be effectively done only keep varinats that are only unlinked on the same chromsome.
# E.g. To evaluate the transmission disequilibirium of LoF variants on constrained genes, we first apply the site level filter,
# then keep only LoF variants and cons genes. After that, we remove variants on the same chromsome and closer than 50cM.
# Then we run this pipeline on thinned variants again to get correct binomial signifiance.

[Sample]
# Table of sample level information.
# If sample table is not provided, sample info will be fetched from the variant table, but parsing large variant 
# table will be slow.
Table=Founders.txt

# Sample size is used when full sample table is not available and sample in the variant table is not complete
# Specified sample sizes can also be group-specific, for example, All:564,Complex:200,Isolated:100
# When sample table is provided, sample size will be used to verify the sample table after applying sample filter
# and inclusion/exclusion criteria.
Size=912

# Sample ID appear in the sample table, this will be used to link IDs in the variant table
SampID=IID

# We can also provide an over-all sample level filter.
Filter='Phenotype=="Unaffected"'

# A list of good samples to be included, for example, to focus analysis on Europeans in case-control comparison
Include=GoodSamps.txt
# A list of bad samples to be excluded from analysis
Exclude=BadSamps.txt

# Neither exclusion nor inclusion list defined above will affect counting the family events
# If we want to remove some family member from counting family events or included in family
# based filter, use FamExclude to specify the sample list. 
# Note: MZ twins and technical duplicates specified in Twins below will be used to avoid double counting family events
FamExclude=NotInAnalysis.txt


# Define groups of samples used in aggregation
# Note: No default group "All" will be created for sample group unless group definition is absent
# When sample group is not defined and sample table is not available, it is possible that some sample not
# appeared in the variant table. In that case we need to define sample size for different groups explicitly.
Group=All
Group_Filter='Pheno!=""'
Group=Father
Group_Filter='Gender=="Male"'
Group=Mother
Group_Filter='Gender=="Female"'

# Specify pairs of sample groups for burden comparison.
# Note: for a proper comparison between groups, samples should match ancestries, and other types of confounding
# factors should be controlled
Compare=Mother:Father
Compare=Simplex:Multiplex


# Define MZ twin pairs or sib pairs
# The twin and sib pairs will be used to define a group related individuals. When summarizing rare variant burden
# if multiple related individuals belong to the same sample group, only the first one (lexical order) will be used.
# Note if two samples of a sib pair are in different groups, neither will be removed in summarizing and comparing
# rare variant burden. It is user's responsibility to make sure that samples from two contrasting groups are unrelated
# MZ twins (including tech dups) are also used to avoid double counting familial events.
Twins=MZTwinOrDupPairs.txt
Sibs=FullOrHalfSibPairs.txt



[Gene]
# Blacklist (should contain gene IDs)
Exclude=/Users/xzhou/Documents/Collaboration/Genet/MutRate/GENCODEV19_blacklist.txt

# Full gene inclusion list (c.f. in dnv_burden or rg_burden, full gene list is defined from from mutrate or CAF table)
# Genes in this list will be assigned to "All" set.
# And all other gene sets will also remove genes not in the inclusion list.
# If this list is not available, we will include all genes observed in the variant table (can be slow)
Include=AllGenes.txt

# Gene sets (can be defined in multiple ways)
Set=/Users/xzhou/Documents/Collaboration/Genet/MutRate/NaZhu20190816_rate_refmt.txt
Set_Fields=GeneID,Constrained


# Calibrating QC parameters
# The calibration filter will be applied after main site level filter and family filters
[Calibrate]
# The calibration need a filter template using fields from input file and parameters that can be 
# substituted for values defined separately from filter.
# The filter will be on site level, no special action is needed to deal with duplicated sample
Filter='VQSLOD != "NA" & MQ !="NA" & VQSLOD >= VQSRThres & MQ >= MQThres'
# Parameter ranges are defined as step:end:step or comma separated values
VQSRThres=-2:1:0.5
MQThres=30,40

[Parallel]
jobs=4

# Gene-based output table
[GeneTab]
# Select sample groups and variant classes to appear in the gene table
# For each combination of sample group and variant class, there will be a count column SampGrp_VarClass_Count
# If familal events are defined, count column will be followed by SampGrp_VarClass_Label where Label is the 
# name of defined familial events
SampGroup=All
VarClass=LoF,Dmis_MPC2,Silent

# Extra-gene level information to appear in gene-based table
# Specify the fields to link additional gene level information
GXref=/Users/xzhou/Repository/Genes/HGNC/Processed/GencodeV19GeneTable_HGNC20180722.txt
GXref_Fields=EnsemblID,HGNC
GXref=/Users/xzhou/Repository/Genes/Constraint/ExAC_gnomAD/ExAC_r0.3.txt
GXref_Fields=GeneID,pLI

# Sample level output table
# No twins or sibs will be removed
[SampTab]
# Select gene sets and variant classes to appear in the sample table
# The column name will be GeneSet_VarClass_Count. And if familial events are defined, count column
# will be followed by columns for the number of family events (similar to gene level table)
GeneSet=Constrained
VarClass=LoF,Dmis_CADD25

# Extra-sample level information
SXref=SampTable.txt
SXref_Fields=SubmitID:IID,Sex,NumOffspgND:NOffspg,FamilyType

# Dump of rare variants of selected variant class in one gene set and for one group of sample
# The output format is the same as input variant table, optionally adding gene and sample level external information
# The file will be sorted by 
[Dump]
SampGroup=All
VarClass=LoF
GeneSet=Constrained

GXref=/home/xz2680/Dropbox/Data/GeneMetrics/CassaCA2017_sHet.txt
GXref_Fields=GeneID,pLI
SXref=Phenotype.txt
SXref_Fields=IID,CogImpair,ADHD






