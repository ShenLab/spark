.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Genet::File::BPed 3"
.TH Genet::File::BPed 3 "2020-01-07" "perl v5.26.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Genet::File::BPed \- Read and write PLINK BPed format.
.SH "VERSION"
.IX Header "VERSION"
Version 0.01
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Genet::File::BPed;
\&
\&    my @fullsamp = map { [ (split)[0..5] ] } slurp "CEU.fam";
\&    my @subsamp;
\&    foreach my $ii (0..$#fullsamp) {
\&        push @subsamp, $fullsamp[$ii] unless $ii % 2;
\&    }
\&
\&    my $reader = Genet::File::BPed\->new("$ENV{HOME}/Temp/CEU",
\&        {fiid => 1, gstr => 1, samp => [ map { $_\->[0].\*(Aq\-\*(Aq.$_\->[1] } @subsamp ]});
\&
\&    my $writer = Genet::File::BPed\->new("$ENV{HOME}/Temp/CEUSubset",
\&        {samp => \e@subsamp, fiid => 1, write => 1});
\&
\&    while(my @dat = $reader\->read_next) {
\&        $reader\->recalc_major(@dat);
\&        last if $dat[0]{CHROM} > 1;
\&        $writer\->write_next(@dat);
\&    }
.Ve
.SH "SUBROUTINES/METHODS"
.IX Header "SUBROUTINES/METHODS"
.ie n .SS "$class\->new \s-1PREFIX\s0 [, \s-1OPTIONS\s0]"
.el .SS "\f(CW$class\fP\->new \s-1PREFIX\s0 [, \s-1OPTIONS\s0]"
.IX Subsection "$class->new PREFIX [, OPTIONS]"
Create an object for read or write genotypes from \s-1PLINK\s0 BPed file.
.PP
When fam/bim/bed files exist, the constructed object is by default used for reading
unless forced to overrite the existing files.
.PP
When none of such files exist, the constructed object will be used for writing.
In this case, sample level information must be provided. In its minimal, it can be a
list of sample IDs. The full information should be the same standard 6\-column
\&\s-1FAM\s0 file used by plink. Each individual can be stored as arrayref or hashref.
.PP
\fIOptions\fR
.IX Subsection "Options"
.ie n .IP """samp""" 5
.el .IP "\f(CWsamp\fR" 5
.IX Item "samp"
For reading, this is the subset of samples for reading, default is to read all.
For writing, this is the full sample list to write into fam file.
.ie n .IP """fiid""" 5
.el .IP "\f(CWfiid\fR" 5
.IX Item "fiid"
The keys to genotype hash is \s-1IID\s0 by default, use this option to switch to \*(L"FID-IID\*(R".
.ie n .IP """gstr""" 5
.el .IP "\f(CWgstr\fR" 5
.IX Item "gstr"
The values in the genotype hash will be represented as strings like \*(L"minor/major\*(R".
Default is undef. Switch off this option to use the number of major alleles.
.ie n .IP """write""" 5
.el .IP "\f(CWwrite\fR" 5
.IX Item "write"
Force writing, without check the existing files.
.SS "Sample Accessors"
.IX Subsection "Sample Accessors"
\&\f(CW$self\fR\->get_samp: Return sample list, each sample is hashref.
.PP
\&\f(CW$self\fR\->get_sampids : Return sample IDs, either \s-1IID\s0 or FID-IID depending on the init option.
.ie n .SS "$self\->read_next"
.el .SS "\f(CW$self\fP\->read_next"
.IX Subsection "$self->read_next"
Read genotypes for the next variant. It returns \e%site and \e%geno, in array or arrayref
depending on the context.
.PP
The site level information will contain following fields as hash or array.
\&\s-1CHROM, ID, POS, GPOS, MAJOR, MINOR\s0
.PP
The genotype will be a hash, indexed by the compound sample name \s-1IID\s0 or FID-IID.
Values will be the genotype string representation or number of major alleles.
.PP
Samples with missing genotypes should exist in the hash, with undef values.
.SS "Allele Frequencies."
.IX Subsection "Allele Frequencies."
allele_count \s-1SITE, GENO\s0 [, \s-1SAMP\s0]: calculate allele counts. Returns a hash/hashref.
.PP
allele_freq \s-1SITE, GENO\s0 [, \s-1SAMP\s0]: calculate allele frequencies. Returns a hash/hashref.
.PP
recalc_major \s-1SITE, GENO\s0 [, \s-1SAMP\s0]: re-calculate the major allele in place
.PP
After subsetting the whole sample, allele frequency may change, so major/minor allele
may also change.
.PP
\&\fB\s-1NOTE\s0\fR: by default, all samples were used for allele frequency calculation.
Optionally, users can provide a list of samples (e.g. founders) on whom allele
frequencies are calculated.
.SS "Genotyping Missingness"
.IX Subsection "Genotyping Missingness"
geno_miss : the number of missing genotypes
.PP
geno_miss_rate : the missing genotype rate
.PP
geno_nomiss : the number of non-missing genotyes
.PP
geno_nomiss_rate : the non-missing genotype rate
.ie n .SS "$self\->write_next"
.el .SS "\f(CW$self\fP\->write_next"
.IX Subsection "$self->write_next"
Return a bped file writer.
.PP
Each call of the write require site and geno as input, which are the same as returned
from the tierator. It will consecutively write to the stored file handler.
.PP
The required input is site and genotype level information, the same as returned from
the iterator. Genotypes will be the number of major alleles.
.SH "AUTHOR"
.IX Header "AUTHOR"
Xueya Zhou, \f(CW\*(C`<xueyazhou at gmail.com>\*(C'\fR
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to \f(CW\*(C`bug\-genet at rt.cpan.org\*(C'\fR, or through
the web interface at <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Genet>.  I will be notified, and then you'll
automatically be notified of progress on your bug as I make changes.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc Genet::File::BPed
.Ve
.PP
You can also look for information at:
.IP "\(bu" 4
\&\s-1RT: CPAN\s0's request tracker (report bugs here)
.Sp
<http://rt.cpan.org/NoAuth/Bugs.html?Dist=Genet>
.IP "\(bu" 4
AnnoCPAN: Annotated \s-1CPAN\s0 documentation
.Sp
<http://annocpan.org/dist/Genet>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
<http://cpanratings.perl.org/d/Genet>
.IP "\(bu" 4
Search \s-1CPAN\s0
.Sp
<http://search.cpan.org/dist/Genet/>
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright 2018 Xueya Zhou.
.PP
This program is free software; you can redistribute it and/or modify it
under the terms of the the Artistic License (1.0). You may obtain a
copy of the full license at:
.PP
<http://www.perlfoundation.org/artistic_license_1_0>
.PP
Aggregation of this Package with a commercial distribution is always
permitted provided that the use of this Package is embedded; that is,
when no overt attempt is made to make this Package's interfaces visible
to the end user of the commercial distribution. Such use shall not be
construed as a distribution of this Package.
.PP
The name of the Copyright Holder may not be used to endorse or promote
products derived from this software without specific prior written
permission.
.PP
\&\s-1THIS PACKAGE IS PROVIDED \*(L"AS IS\*(R" AND WITHOUT ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.\s0
