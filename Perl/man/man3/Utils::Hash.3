.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Utils::Hash 3"
.TH Utils::Hash 3 "2020-08-01" "perl v5.26.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Utils::Hash \- Simple hash utilities.
.SH "VERSION"
.IX Header "VERSION"
Version 0.01
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Implement some simple useful functions for hash.
.PP
.Vb 1
\&        $args = merge_opts($argref, sort => 1, rev => 0, para => undef);
.Ve
.SH "EXPORT"
.IX Header "EXPORT"
.IP "\(bu" 5
merge_opts
.SH "SUBROUTINES/METHODS"
.IX Header "SUBROUTINES/METHODS"
.SS "merge_opts \s-1ARGS, OPTS\s0"
.IX Subsection "merge_opts ARGS, OPTS"
Merge user provided options with defaults.
.PP
\&\s-1ARGS\s0 is user provided options, either undef or a hash ref.
\&\s-1OPTS\s0 is default \*(L"key => value\*(R" pairs, it should include all allowed
option keys, no matter it is defined or not.
.PP
After calling this function, the return value is a \fBreference\fR to a readonly hash.
The input \f(CW$argref\fR will also become readonly. This is aim to provide a safe way to
specify optional arguments to subroutines. It only allows options at given set
of keys to be set, and prevents accidental modification to the option values in 
the future.
.PP
Utility function: merge config and parameters.
.PP
This function can be used to combine parameters specified in the config file
and user provided key-value pairs. The function is similar to merge_opts,
but it deal with the data structure after parsing sectioned config files.
.PP
The limitation of this function is: if one slot is hash reference,
then additional parameter will override existing parameters. So we forbid
overriding in such cases.
.SS "set_default \s-1HASH, SLOT, DEFAULT\s0"
.IX Subsection "set_default HASH, SLOT, DEFAULT"
If the \s-1HASH\-\s0>{\s-1SLOT\s0} has not been defined, set the value to \s-1DEFAULT.\s0
.SS "chk_default \s-1HASH,\s0 SLOt, \s-1DEFAULT\s0"
.IX Subsection "chk_default HASH, SLOt, DEFAULT"
The same as set_default, except that if the value \s-1HASH\-\s0>{\s-1SLOT\s0} has been defined,
then check that its value is equal to default.
.SS "peek_hash \s-1HASH\s0"
.IX Subsection "peek_hash HASH"
Peek the first element of hash, return a key-value pair.
.SS "str2hash"
.IX Subsection "str2hash"
Convert between string represetation and key-value pairs.
.PP
The default separator of pairs is ';' (psep), separator between key and value is '=' (kvsep).
.PP
This function is useful for parsing \s-1VCF\s0 and \s-1GFF\s0 files.
.PP
Example: ID=ENST00000456328.2;Parent=ENSG00000223972.5;gene_id=ENSG00000223972.5_2;transcript_id=ENST00000456328.2_1;gene_type=transcribed_unprocessed_pseudogene;gene_name=DDX11L1;transcript_type=processed_transcript;transcript_name=DDX11L1\-202;level=2
.PP
Options: 
1. Use psep to define separators between pairs and kvsep to define separator between key and value
2. To preverse the order of keys, set order => 1
.SS "array2hash"
.IX Subsection "array2hash"
Create a hash from an array, that uses all array elements as keys.
.SS "array2hist"
.IX Subsection "array2hist"
Use a hash to track the number of appearance times for each element in a list.
The resulting hash has { element => counts } pairs, and can serve as a simple histogram.
.SS "hash_walk \s-1HASH,\s0 [], \s-1CALLBACK\s0"
.IX Subsection "hash_walk HASH, [], CALLBACK"
Recursively visit complex data structure.
.PP
This is a general purpose subroutine to walk a hash structure. Such a hash walker
takes a code reference and simply calls that code for each leaf node in the hash.
.PP
See also: Data::Traverse
.PP
.Vb 10
\&  my %data = (
\&    a => {
\&        ab => 1,
\&        ac => 2,
\&        ad => {
\&            ada => 3,
\&            adb => 4,
\&            adc => {
\&                adca => 5,
\&                adcb => 6,
\&            },
\&        },
\&    },
\&    b => 7,
\&    c => {
\&        ca => 8,
\&        cb => {
\&            cba => 9,
\&            cbb => 10,
\&        },
\&    },
\&  );
\&
\&  sub print_keys_and_value {
\&    my ($k, $v, $key_list) = @_;
\&    printf "k = %\-8s  v = %\-4s  key_list = [%s]\en", $k, $v, "@$key_list";
\&  }
\&
\&  hash_walk(\e%data, [], \e&print_keys_and_value);
.Ve
.SS "prompt_params \s-1PARLIST\s0"
.IX Subsection "prompt_params PARLIST"
Provide a list of variables, its description, and default values,
prompt users to update the parameter values, and return the results
as a hash.
.PP
.Vb 9
\&  my @params = (SNVTR => "SNV Tranche" => 99.9, 
\&    VQX => "Variant Quality" => 100,
\&    GQ  => "Min. GQ for Autosome" => 60,
\&    MISS => "Max. Missing Rate for Autosome" => 0.02,
\&    HWE => "P\-value Threshold for HWE\-test for Autosome" => 1.0e\-5,
\&    VQX => "Variant Quality for chrX" => 100,
\&    GQX => "Min. GQ for chrX" => 40,
\&    MISSX => "Max. Missing Rate for chrX" => 0.03,
\&    HWEX => "P\-value Threshold for HWE for chrX" => 1.0e\-4);
\&
\&  my %conf = accept_prompt(@params);
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Xueya Zhou, \f(CW\*(C`<xueyazhou at gmail.com>\*(C'\fR
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to \f(CW\*(C`bug\-utils at rt.cpan.org\*(C'\fR, or through
the web interface at <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Utils>.  I will be notified, and then you'll
automatically be notified of progress on your bug as I make changes.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc Utils::Hash
.Ve
.PP
You can also look for information at:
.IP "\(bu" 4
\&\s-1RT: CPAN\s0's request tracker (report bugs here)
.Sp
<http://rt.cpan.org/NoAuth/Bugs.html?Dist=Utils>
.IP "\(bu" 4
AnnoCPAN: Annotated \s-1CPAN\s0 documentation
.Sp
<http://annocpan.org/dist/Utils>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
<http://cpanratings.perl.org/d/Utils>
.IP "\(bu" 4
Search \s-1CPAN\s0
.Sp
<http://search.cpan.org/dist/Utils/>
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright 2018 Xueya Zhou.
.PP
This program is free software; you can redistribute it and/or modify it
under the terms of the the Artistic License (1.0). You may obtain a
copy of the full license at:
.PP
<http://www.perlfoundation.org/artistic_license_1_0>
.PP
Aggregation of this Package with a commercial distribution is always
permitted provided that the use of this Package is embedded; that is,
when no overt attempt is made to make this Package's interfaces visible
to the end user of the commercial distribution. Such use shall not be
construed as a distribution of this Package.
.PP
The name of the Copyright Holder may not be used to endorse or promote
products derived from this software without specific prior written
permission.
.PP
\&\s-1THIS PACKAGE IS PROVIDED \*(L"AS IS\*(R" AND WITHOUT ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.\s0
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 80:" 4
.IX Item "Around line 80:"
Unknown directive: =head
