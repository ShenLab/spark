.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Utils::DB 3"
.TH Utils::DB 3 "2018-01-31" "perl v5.26.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Utils::DB \- Utility interface for MySQL database.
.SH "VERSION"
.IX Header "VERSION"
Version 0.01
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&        use Utils::DB;
\&
\&        my $dbo = Utils::DB\->new({ host => \*(Aqgenome\-mysql.cse.ucsc.edu\*(Aq, db => \*(Aqhg19\*(Aq,
\&                user => \*(Aqgenomep\*(Aq, pass => \*(Aqpassword\*(Aq });
\&        my $ntrans = $dbo\->getQuickScalar("SELECT count(*) FROM refGene WHERE cdsStart<txStart");
\&        my @dmd = $dbo\->getQuickScalar("SELECT * FROM from refGene WHERE name2=\*(AqDMD\*(Aq");
\&
\&        my $git = igrep { $_\->{cdsStart}<$_\->{txStart} } $dbo\->iter();
\&        while($gdat = $git\->()) {
\&                ...
\&        }
.Ve
.SH "SUBROUTINES/METHODS"
.IX Header "SUBROUTINES/METHODS"
.ie n .SS "$self\->new \s-1OPTIONS\s0"
.el .SS "\f(CW$self\fP\->new \s-1OPTIONS\s0"
.IX Subsection "$self->new OPTIONS"
Create a new object.
Required input options: host, db, user, pass; Optional: port.
.ie n .SS "$self\->getQuickScalar \s-1SQL\s0"
.el .SS "\f(CW$self\fP\->getQuickScalar \s-1SQL\s0"
.IX Subsection "$self->getQuickScalar SQL"
Return the scalar result of single row/single column query.
.ie n .SS "$self\->getQuickArray \s-1SQL\s0"
.el .SS "\f(CW$self\fP\->getQuickArray \s-1SQL\s0"
.IX Subsection "$self->getQuickArray SQL"
Return the array for single column query or just keep the
first field for each row.
.ie n .SS "$self\->getQuickHash \s-1SQL\s0"
.el .SS "\f(CW$self\fP\->getQuickHash \s-1SQL\s0"
.IX Subsection "$self->getQuickHash SQL"
Return a hash for two column query.
.ie n .SS "$self\->getQuickArrayRef \s-1SQL\s0"
.el .SS "\f(CW$self\fP\->getQuickArrayRef \s-1SQL\s0"
.IX Subsection "$self->getQuickArrayRef SQL"
Return the an array of hashref for multi-column query
.ie n .SS "$self\->listTables [\s-1PATTERN\s0]"
.el .SS "\f(CW$self\fP\->listTables [\s-1PATTERN\s0]"
.IX Subsection "$self->listTables [PATTERN]"
List table names in the database.
.ie n .SS "$self\->listFields \s-1TABLE\s0"
.el .SS "\f(CW$self\fP\->listFields \s-1TABLE\s0"
.IX Subsection "$self->listFields TABLE"
Return a list of fields in the table.
.ie n .SS "$self\->tableExists \s-1TABLE\s0"
.el .SS "\f(CW$self\fP\->tableExists \s-1TABLE\s0"
.IX Subsection "$self->tableExists TABLE"
Test if a table exists
May be slow if too many tables exist
.ie n .SS "$self\->tablesExist \s-1TABLE1,TABL2,...\s0"
.el .SS "\f(CW$self\fP\->tablesExist \s-1TABLE1,TABL2,...\s0"
.IX Subsection "$self->tablesExist TABLE1,TABL2,..."
Test if all tables exists
.ie n .SS "$self\->tableWildExists \s-1PATTERN\s0"
.el .SS "\f(CW$self\fP\->tableWildExists \s-1PATTERN\s0"
.IX Subsection "$self->tableWildExists PATTERN"
Return \s-1TRUE\s0 if table (which can include \s-1SQL\s0 wildcards) exists.
.ie n .SS "$self\->getColumnNum \s-1TABLE\s0"
.el .SS "\f(CW$self\fP\->getColumnNum \s-1TABLE\s0"
.IX Subsection "$self->getColumnNum TABLE"
Return the number of columns in a table.
.ie n .SS "$self\->getTableSize \s-1TABLE\s0"
.el .SS "\f(CW$self\fP\->getTableSize \s-1TABLE\s0"
.IX Subsection "$self->getTableSize TABLE"
Return row count if a table exists, undef if it does not
.ie n .SS "$self\->getFieldInfo \s-1TABLE\s0"
.el .SS "\f(CW$self\fP\->getFieldInfo \s-1TABLE\s0"
.IX Subsection "$self->getFieldInfo TABLE"
Return field information for table.
.ie n .SS "$self\->getFieldIndex \s-1TABLE, FIELD\s0"
.el .SS "\f(CW$self\fP\->getFieldIndex \s-1TABLE, FIELD\s0"
.IX Subsection "$self->getFieldIndex TABLE, FIELD"
Returns index of field in a row from table, or undef if it
does not exist
.ie n .SS "$self\->getPrimaryKey \s-1TABLE\s0"
.el .SS "\f(CW$self\fP\->getPrimaryKey \s-1TABLE\s0"
.IX Subsection "$self->getPrimaryKey TABLE"
Get primary key if any for table return empty array if none
.ie n .SS "$self\->getEnumDef \s-1TABLE, COLNAME\s0"
.el .SS "\f(CW$self\fP\->getEnumDef \s-1TABLE, COLNAME\s0"
.IX Subsection "$self->getEnumDef TABLE, COLNAME"
Get the definitions of a enum column in a table, returning an
array of enum values.
.ie n .SS "$self\->getRandSample \s-1TABLE, NUM, SEED\s0"
.el .SS "\f(CW$self\fP\->getRandSample \s-1TABLE, NUM, SEED\s0"
.IX Subsection "$self->getRandSample TABLE, NUM, SEED"
Get random sample from a database table given seed
.ie n .SS "$self\->iter \s-1SQL\s0 [, \s-1OPTIONS\s0]"
.el .SS "\f(CW$self\fP\->iter \s-1SQL\s0 [, \s-1OPTIONS\s0]"
.IX Subsection "$self->iter SQL [, OPTIONS]"
Return an Iterator::Simple iterator.
.PP
See also Iterator::DBI pacakge.
.PP
Options:
By default, the return value by calling iterator is hash or hashref (depending on the context),
users can ask it to return arrayref by switching on the \f(CW\*(C`array\*(C'\fR option.
.SH "AUTHOR"
.IX Header "AUTHOR"
Xueya Zhou, \f(CW\*(C`<xueyazhou at gmail.com>\*(C'\fR
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to \f(CW\*(C`bug\-utils at rt.cpan.org\*(C'\fR, or through
the web interface at <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Utils>.  I will be notified, and then you'll
automatically be notified of progress on your bug as I make changes.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc Utils::DB
.Ve
.PP
You can also look for information at:
.IP "\(bu" 4
\&\s-1RT: CPAN\s0's request tracker (report bugs here)
.Sp
<http://rt.cpan.org/NoAuth/Bugs.html?Dist=Utils>
.IP "\(bu" 4
AnnoCPAN: Annotated \s-1CPAN\s0 documentation
.Sp
<http://annocpan.org/dist/Utils>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
<http://cpanratings.perl.org/d/Utils>
.IP "\(bu" 4
Search \s-1CPAN\s0
.Sp
<http://search.cpan.org/dist/Utils/>
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright 2018 Xueya Zhou.
.PP
This program is free software; you can redistribute it and/or modify it
under the terms of the the Artistic License (1.0). You may obtain a
copy of the full license at:
.PP
<http://www.perlfoundation.org/artistic_license_1_0>
.PP
Aggregation of this Package with a commercial distribution is always
permitted provided that the use of this Package is embedded; that is,
when no overt attempt is made to make this Package's interfaces visible
to the end user of the commercial distribution. Such use shall not be
construed as a distribution of this Package.
.PP
The name of the Copyright Holder may not be used to endorse or promote
products derived from this software without specific prior written
permission.
.PP
\&\s-1THIS PACKAGE IS PROVIDED \*(L"AS IS\*(R" AND WITHOUT ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.\s0
