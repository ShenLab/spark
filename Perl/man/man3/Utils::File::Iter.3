.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Utils::File::Iter 3"
.TH Utils::File::Iter 3 "2020-11-30" "perl v5.26.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Utils::File::Iter \- Iterator access to data files.
.SH "VERSION"
.IX Header "VERSION"
Version 0.01
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Utils::File::Iter;
\&
\&    my $iter = iter_file($data_file); # with default parameters
\&    # In array context, also get field names and specify tab as separator
\&    my ($iter, $fnames) = iter_file($data_file, { fsep => qr/\et/ }); 
\&
\&    while(<$iter>) {
\&        my $dat = $_; # I advise not to use $_ directly, as $_ is subject to change
\&        ... do things with $dat ...
\&    }
\&    while(my $dat = $iter\->()) {
\&        ... do things with $dat ...
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The main function of this module is to create an iterator (an Iterator::Simple object) 
for going through each line of delimiter separated data file.
.PP
Supported file format including: plain or gzipped text, csv, tsv file and spreadsheets
including ods, xls, xlsx formats.
.PP
For small files, can also slurp the entire content, see Data::Table module.
.SH "SUBROUTINES/METHODS"
.IX Header "SUBROUTINES/METHODS"
.SS "iter_file \s-1FILE\s0 [, \s-1OPTIONS\s0]"
.IX Subsection "iter_file FILE [, OPTIONS]"
\&\f(CW\*(C`iter_file\*(C'\fR expects a file name (or handle) and a hash reference for options.
By default, file type is inferred from file name suffix. It can be overriden
by the options, which is useful when file handle is used for input stream.
.PP
By default, gzipped files will be parsed by IO::Uncompress::Gunzip module
with MultiStream option turned on to support bgzip format. But this would
incur performance issue, see here <https://goo.gl/uDHn2h>. To speed up gzip file
parsing, PerlIO::gzip can be used for regular gzip files. This can be achieved
by either provide file handle returned by \f(CW\*(C`PerlIO::gzip\*(C'\fR, or provide a gzip faster
option (see below).
.PP
\fIOptions\fR
.IX Subsection "Options"
.ie n .IP """type""" 5
.el .IP "\f(CWtype\fR" 5
.IX Item "type"
File type (string). Use this to override the default guess based on file name.
When file handle is used, default is to assume txt.
Supported file types: \fItxt, tsv, csv, xlsx, ods, xls\fR
.ie n .IP """encode""" 5
.el .IP "\f(CWencode\fR" 5
.IX Item "encode"
(Only for unzipped txt/csv files) Specify the input file encoding (e.g. \s-1UTF\-8\s0).
.ie n .IP """fastgz""" 5
.el .IP "\f(CWfastgz\fR" 5
.IX Item "fastgz"
Indicator to use faster gzip file parser (0/1). Default is 0.
Turn on this option only for ordinary gzip files, because it does not
supprot multistream as required for parsing bgzip.
.ie n .IP """fsep""" 5
.el .IP "\f(CWfsep\fR" 5
.IX Item "fsep"
(Only for txt/csv file) Field separator (regex or string). 
Default is qr/\es+/ for txt file, ',' for csv file, qr/\et/ for tsv file.
Not used when praseing spreadsheets.
.ie n .IP """fquote""" 5
.el .IP "\f(CWfquote\fR" 5
.IX Item "fquote"
(Csv file only) The character to quote fields.
.ie n .IP """header""" 5
.el .IP "\f(CWheader\fR" 5
.IX Item "header"
Indicator for the existance of header line (0/1). Default is 1, set to 0 if no header.
.ie n .IP """fields""" 5
.el .IP "\f(CWfields\fR" 5
.IX Item "fields"
Provide field names when \f(CW\*(C`header=0\*(C'\fR (array ref). 
If not provided, field names for files with header=0 is 1,2,..ncol (1\-based).
Where the number of columns (ncol) is determined based on the first line.
Note: if \f(CW\*(C`header=0\*(C'\fR and file argument is non-seekable file handle, then field
names must be provided.
.ie n .IP """alias""" 5
.el .IP "\f(CWalias\fR" 5
.IX Item "alias"
Field name alias (hashref).
.ie n .IP """subset""" 5
.el .IP "\f(CWsubset\fR" 5
.IX Item "subset"
Subset of the fields by names. When alias is provided, it should use alias.
TechNote: subsetting is applied after aliasing. So when table is large, it's more likely to have
name conflict when alias is applied first. To circumvent this issue, use *select*
.ie n .IP """exclude""" 5
.el .IP "\f(CWexclude\fR" 5
.IX Item "exclude"
A list of fields to be excluded. When alias is provided, it should use alias
as the field name. When subset is provided, this option will be ignored.
.ie n .IP """select""" 5
.el .IP "\f(CWselect\fR" 5
.IX Item "select"
Provide a hashref of field names and (optionally) their aliases. The iteration of the file
will then be restricted to the fields specified by this option. alias, subset, exclude
will be ignored if select is provided.
.ie n .IP """skip""" 5
.el .IP "\f(CWskip\fR" 5
.IX Item "skip"
The number of lines (rows) to skip from the beginning (counts).
.ie n .IP """ignore""" 5
.el .IP "\f(CWignore\fR" 5
.IX Item "ignore"
(Txt/tsv file only) Ignore the lines with the pattern (regex).
By default, empty lines are also automatically ignored.
.ie n .IP """chomp""" 5
.el .IP "\f(CWchomp\fR" 5
.IX Item "chomp"
(Txt only) chomp off trailing white space before paring a line (0\-3). Default: 0.
.Sp
.Vb 6
\&   chomp  leading  trailing
\&   \-\-\-\-\-  \-\-\-\-\-\-\-  \-\-\-\-\-\-\-\-\-
\&     0      n/a      n/a
\&     1     chomp     n/a
\&     2      n/a     chomp
\&     3     chomp    chomp
.Ve
.ie n .IP """strip""" 5
.el .IP "\f(CWstrip\fR" 5
.IX Item "strip"
Remove leading and/or trailing white space from every field (0\-3). Default: 0.
For txt file parsing with default \f(CW\*(C`fsep\*(C'\fR, white spaces should be removed automatically.
.Sp
.Vb 6
\&   strip  leading  strailing
\&   \-\-\-\-\-  \-\-\-\-\-\-\-  \-\-\-\-\-\-\-\-\-
\&     0      n/a      n/a
\&     1     strip     n/a
\&     2      n/a     strip
\&     3     strip    strip
.Ve
.ie n .IP """strict""" 5
.el .IP "\f(CWstrict\fR" 5
.IX Item "strict"
Exit (1) or skip (0) upon error lines. Default is 1 (recommended).
Can be turned off to allow some mismatches between the number of values and fields.
.ie n .IP """sheet""" 5
.el .IP "\f(CWsheet\fR" 5
.IX Item "sheet"
(Spreadsheet only) Specify the data sheet by name or by number.
.ie n .IP """raw""" 5
.el .IP "\f(CWraw\fR" 5
.IX Item "raw"
(Spreadsheet only) Indicator for processing raw values rather than formatted values,
default: 1.
.ie n .IP """maxcol"" and ""maxrow""" 5
.el .IP "\f(CWmaxcol\fR and \f(CWmaxrow\fR" 5
.IX Item "maxcol and maxrow"
(Spreadsheet only) The max range of col and row, override the default.
Customized value cannot exceed default max.
.SS "data_tab \s-1FILE\s0 [, \s-1OPTIONS\s0]"
.IX Subsection "data_tab FILE [, OPTIONS]"
Create a Data::Table object from file. \s-1OPTIONS\s0 can be all \f(CW\*(C`iter_file\*(C'\fR options.
.SS "slurp_file \s-1FILE\s0 [, \s-1OPTIONS\s0]"
.IX Subsection "slurp_file FILE [, OPTIONS]"
Slurp all the content of a file. It uses \f(CW\*(C`iter_file\*(C'\fR to extract the content,
and store in an array of hashrefs.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Iterator::Simple::Util::CSV
.SH "AUTHOR"
.IX Header "AUTHOR"
Xueya Zhou, \f(CW\*(C`<xueyazhou at gmail.com>\*(C'\fR
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to \f(CW\*(C`bug\-utils at rt.cpan.org\*(C'\fR, or through
the web interface at <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Utils>.  I will be notified, and then you'll
automatically be notified of progress on your bug as I make changes.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc Utils::File::Iter
.Ve
.PP
You can also look for information at:
.IP "\(bu" 4
\&\s-1RT: CPAN\s0's request tracker (report bugs here)
.Sp
<http://rt.cpan.org/NoAuth/Bugs.html?Dist=Utils>
.IP "\(bu" 4
AnnoCPAN: Annotated \s-1CPAN\s0 documentation
.Sp
<http://annocpan.org/dist/Utils>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
<http://cpanratings.perl.org/d/Utils>
.IP "\(bu" 4
Search \s-1CPAN\s0
.Sp
<http://search.cpan.org/dist/Utils/>
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright 2018 Xueya Zhou.
.PP
This program is free software; you can redistribute it and/or modify it
under the terms of the the Artistic License (1.0). You may obtain a
copy of the full license at:
.PP
<http://www.perlfoundation.org/artistic_license_1_0>
.PP
Aggregation of this Package with a commercial distribution is always
permitted provided that the use of this Package is embedded; that is,
when no overt attempt is made to make this Package's interfaces visible
to the end user of the commercial distribution. Such use shall not be
construed as a distribution of this Package.
.PP
The name of the Copyright Holder may not be used to endorse or promote
products derived from this software without specific prior written
permission.
.PP
\&\s-1THIS PACKAGE IS PROVIDED \*(L"AS IS\*(R" AND WITHOUT ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.\s0
