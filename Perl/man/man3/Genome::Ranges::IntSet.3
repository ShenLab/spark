.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Genome::Ranges::IntSet 3"
.TH Genome::Ranges::IntSet 3 "2021-01-08" "perl v5.26.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Genome::Ranges::IntSet \- Integer set operations on genome ranges.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The object is implemented a hashref keyed by chromosome names. Value part is 
Set::IntSpan object. The set can be constructed from a Genome::Ranges object.
The value part of each entry must be ignored.
.SH "VERSION"
.IX Header "VERSION"
Version 0.01
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&        use Genome::Ranges::IntSet;
\&
\&        $target = Genome::Ranges::IntSet\->new(\e%trng);
\&        $cds = Genome::Ranges::IntSet\->new(\e%crng);
\&
\&        $intersect = $target * $cds;
\&        $rngs = $intersect\->to_ranges();
.Ve
.SH "EXPORT"
.IX Header "EXPORT"
A list of functions that can be exported.  You can delete this section
if you don't export anything, such as for a purely object-oriented module.
.SH "SUBROUTINES/METHODS"
.IX Header "SUBROUTINES/METHODS"
.ie n .SS "$class\->new [\s-1RANGES\s0]"
.el .SS "\f(CW$class\fP\->new [\s-1RANGES\s0]"
.IX Subsection "$class->new [RANGES]"
Create an empty new object or from Genome::Ranges object.
.PP
Also allow construction from file, assuming first three columns will be
chrom, start and end.
.PP
Add an option to read intervals from a file with \s-1BED\s0 format.
.ie n .SS "$self\->add \s-1CHROM, START, END\s0"
.el .SS "\f(CW$self\fP\->add \s-1CHROM, START, END\s0"
.IX Subsection "$self->add CHROM, START, END"
Add a genomic interval.
.ie n .SS "$self\->to_ranges"
.el .SS "\f(CW$self\fP\->to_ranges"
.IX Subsection "$self->to_ranges"
Convert to Genone::Ranbges object, with no value part in each entry.
.ie n .SS "$self\->write \s-1FILE\s0"
.el .SS "\f(CW$self\fP\->write \s-1FILE\s0"
.IX Subsection "$self->write FILE"
Write genomic intervals to file.
.PP
Add option to write intervals to file in \s-1BED\s0 format.
.ie n .SS "$self\->iter"
.el .SS "\f(CW$self\fP\->iter"
.IX Subsection "$self->iter"
Return an iterator. The value returned by calling iterator is
[chrom, pos].
To call iter, all intervals should be closed (i.e., no +/\-inf in star/end).
.ie n .SS "$self\->count [\s-1CHROM\s0]"
.el .SS "\f(CW$self\fP\->count [\s-1CHROM\s0]"
.IX Subsection "$self->count [CHROM]"
Number of non-overlapping intervals in the set.
.ie n .SS "$self\->size [\s-1CHROM\s0]"
.el .SS "\f(CW$self\fP\->size [\s-1CHROM\s0]"
.IX Subsection "$self->size [CHROM]"
Number of base pairs covered by the set. Return \-1 for infinite sets.
.ie n .SS "$self\->clone"
.el .SS "\f(CW$self\fP\->clone"
.IX Subsection "$self->clone"
.Vb 1
\&  Keep a deep copy of the Genome::Range::IntSet object.
.Ve
.SS "Set operations"
.IX Subsection "Set operations"
.Vb 3
\&  Wrapper of the Set::IntSpan\*(Aqs subroutines:
\&    intersect, union, xor, diff, complement
\&    I        , U    , X  , D   , C
.Ve
.SS "AUTOLOADed Operators"
.IX Subsection "AUTOLOADed Operators"
.Vb 3
\&  Comparison  : equal, equivalent, superset, subset
\&  Generator   : cover and holes, inset(trim) and pad
\&  Membership  : member, insert, remove
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Xueya Zhou, \f(CW\*(C`<xueyazhou at gmail.com>\*(C'\fR
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to \f(CW\*(C`bug\-genome at rt.cpan.org\*(C'\fR, or through
the web interface at <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Genome>.  I will be notified, and then you'll
automatically be notified of progress on your bug as I make changes.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc Genome::Ranges::IntSet
.Ve
.PP
You can also look for information at:
.IP "\(bu" 4
\&\s-1RT: CPAN\s0's request tracker (report bugs here)
.Sp
<http://rt.cpan.org/NoAuth/Bugs.html?Dist=Genome>
.IP "\(bu" 4
AnnoCPAN: Annotated \s-1CPAN\s0 documentation
.Sp
<http://annocpan.org/dist/Genome>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
<http://cpanratings.perl.org/d/Genome>
.IP "\(bu" 4
Search \s-1CPAN\s0
.Sp
<http://search.cpan.org/dist/Genome/>
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright 2018 Xueya Zhou.
.PP
This program is free software; you can redistribute it and/or modify it
under the terms of the the Artistic License (1.0). You may obtain a
copy of the full license at:
.PP
<http://www.perlfoundation.org/artistic_license_1_0>
.PP
Aggregation of this Package with a commercial distribution is always
permitted provided that the use of this Package is embedded; that is,
when no overt attempt is made to make this Package's interfaces visible
to the end user of the commercial distribution. Such use shall not be
construed as a distribution of this Package.
.PP
The name of the Copyright Holder may not be used to endorse or promote
products derived from this software without specific prior written
permission.
.PP
\&\s-1THIS PACKAGE IS PROVIDED \*(L"AS IS\*(R" AND WITHOUT ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.\s0
