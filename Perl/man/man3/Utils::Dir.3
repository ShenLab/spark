.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Utils::Dir 3"
.TH Utils::Dir 3 "2018-02-16" "perl v5.26.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Utils::Dir \- Directory accessing utilities.
.SH "VERSION"
.IX Header "VERSION"
Version 0.01
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Useful functions commonly used when accessing directories.
.PP
.Vb 6
\&        if ( ! \-d $targetdir || is_empty($targetdir) ) {
\&                make_tree($sourcedir, $targetdir);
\&        }
\&        else {
\&                @files = list_files($targetdir, {include => /\e.pl$/});
\&        }
.Ve
.SH "EXPORT"
.IX Header "EXPORT"
.IP "\(bu" 5
is_empty
.IP "\(bu" 5
list_files
.IP "\(bu" 5
make_tree
.IP "\(bu" 5
dir_walk
.IP "\(bu" 5
dir_walk_curried
.SH "SUBROUTINES/METHODS"
.IX Header "SUBROUTINES/METHODS"
.SS "is_empty \s-1DIR\s0"
.IX Subsection "is_empty DIR"
Test if directory is empty.
.PP
Will croak if \s-1DIR\s0 does not exist or is not dir.
.PP
Return 1 if \s-1DIR\s0 is empty directory, 0 if \s-1DIR\s0 is not empty.
.SS "list_files \s-1DIR\s0 [, \s-1OPTIONS\s0]"
.IX Subsection "list_files DIR [, OPTIONS]"
Recursively list all files in the directory.
.PP
See also File::Util::list_dir, and File::Find.
.PP
\fIOptions\fR
.IX Subsection "Options"
.ie n .IP """type""" 5
.el .IP "\f(CWtype\fR" 5
.IX Item "type"
Output file types, default: \f(CW\*(C`f\*(C'\fR (file only). 
Use \f(CW\*(C`d\*(C'\fR to output dir only; use \f(CW\*(C`f,d\*(C'\fR or \f(CW\*(C`d,f\*(C'\fR to output both file and directory.
.ie n .IP """include""" 5
.el .IP "\f(CWinclude\fR" 5
.IX Item "include"
Include files whose name match a pattern (regex). When both include and exclude options
are give, include takes higher priority.
.ie n .IP """exclude""" 5
.el .IP "\f(CWexclude\fR" 5
.IX Item "exclude"
Exclude files whose name does not match a pattern (regex).
.Sp
Recursively call the function to list all files in sub-directories, default: 1.
.ie n .IP """verbose""" 5
.el .IP "\f(CWverbose\fR" 5
.IX Item "verbose"
Verbose mode, useful for debug, default: 0.
.SS "make_tree \s-1INDIR, OUTDIR\s0"
.IX Subsection "make_tree INDIR, OUTDIR"
Create the directory tree as input directory.
.PP
See also: File::Path.
.SS "dir_walk \s-1TOPDIR, FILEFUNC, DIRFUNC\s0"
.IX Subsection "dir_walk TOPDIR, FILEFUNC, DIRFUNC"
Recurively go through all files in a directory and take actions.
\&\s-1FILEFUNC\s0 is callback method that receive the file name as input
\&\s-1DIRFUNC\s0 receive both the filename, and an array of results.
.PP
\fIExamples\fR
.IX Subsection "Examples"
.IP "\(bu" 5
List file names in the directory
.Sp
.Vb 2
\&        sub print_filename { print $_[0], "\en" };
\&        dir_walk(\*(Aq.\*(Aq, \e&print_filename, \e&print_filename);
.Ve
.IP "\(bu" 5
Calculate sizes in each sub dirs
.Sp
.Vb 9
\&        sub file_size { \-s $_[0] }
\&        sub dir_size {
\&          my $dir = shift;
\&          my $total = \-s $dir;
\&          for my $n (@_) { $total += $n };
\&          print "%6d %s\en", $total, $dir;
\&          return $total;
\&        }
\&        my $total_size = dir_walk(\*(Aq.\*(Aq, \e&file_size, \e&dir_size)
.Ve
.IP "\(bu" 5
Detecting dangling symbolic links
.Sp
.Vb 5
\&        sub dangles {
\&        my $file = shift;
\&        print "$file\en" if \-l $file && ! \-e $file;
\&        }
\&        dir_walk(\*(Aq.\*(Aq, \e&dangles);
.Ve
.IP "\(bu" 5
Fetch all plain files
.Sp
.Vb 1
\&        @all_plain_files = dir_walk(\*(Aq.\*(Aq, sub {$_[0] } sub {shift; return @_ });
.Ve
.SS "dir_walk_curried"
.IX Subsection "dir_walk_curried"
Curried version of dir_walk above.
.SH "AUTHOR"
.IX Header "AUTHOR"
Xueya Zhou, \f(CW\*(C`<xueyazhou at gmail.com>\*(C'\fR
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to \f(CW\*(C`bug\-utils at rt.cpan.org\*(C'\fR, or through
the web interface at <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Utils>.  I will be notified, and then you'll
automatically be notified of progress on your bug as I make changes.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc Utils::Dir
.Ve
.PP
You can also look for information at:
.IP "\(bu" 4
\&\s-1RT: CPAN\s0's request tracker (report bugs here)
.Sp
<http://rt.cpan.org/NoAuth/Bugs.html?Dist=Utils>
.IP "\(bu" 4
AnnoCPAN: Annotated \s-1CPAN\s0 documentation
.Sp
<http://annocpan.org/dist/Utils>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
<http://cpanratings.perl.org/d/Utils>
.IP "\(bu" 4
Search \s-1CPAN\s0
.Sp
<http://search.cpan.org/dist/Utils/>
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright 2018 Xueya Zhou.
.PP
This program is free software; you can redistribute it and/or modify it
under the terms of the the Artistic License (1.0). You may obtain a
copy of the full license at:
.PP
<http://www.perlfoundation.org/artistic_license_1_0>
.PP
Aggregation of this Package with a commercial distribution is always
permitted provided that the use of this Package is embedded; that is,
when no overt attempt is made to make this Package's interfaces visible
to the end user of the commercial distribution. Such use shall not be
construed as a distribution of this Package.
.PP
The name of the Copyright Holder may not be used to endorse or promote
products derived from this software without specific prior written
permission.
.PP
\&\s-1THIS PACKAGE IS PROVIDED \*(L"AS IS\*(R" AND WITHOUT ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.\s0
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 102:" 4
.IX Item "Around line 102:"
Unknown directive: =teim
