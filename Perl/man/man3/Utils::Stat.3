.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Utils::Stat 3"
.TH Utils::Stat 3 "2019-12-17" "perl v5.26.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Utils::Stat \- Simple statistical utilities.
.SH "VERSION"
.IX Header "VERSION"
Version 0.01
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Functions for doing basic statistical analysis.
See also: \f(CW\*(C`Statistics::Descriptive\*(C'\fR, \f(CW\*(C`Statistics::Distributions\*(C'\fR
.SH "EXPORT"
.IX Header "EXPORT"
.IP "\(bu" 5
mean
.IP "\(bu" 5
median
.IP "\(bu" 5
mad
.IP "\(bu" 5
var
.IP "\(bu" 5
std
.IP "\(bu" 5
sum_sq
.IP "\(bu" 5
corr
.IP "\(bu" 5
chisq_2x2
.IP "\(bu" 5
quantile
.IP "\(bu" 5
percent
.IP "\(bu" 5
index_hist
.IP "\(bu" 5
sample
.IP "\(bu" 5
permute
.IP "\(bu" 5
rand_permute
.SH "SUBROUTINES/METHODS"
.IX Header "SUBROUTINES/METHODS"
By default the input for this module is array or array ref with no missing data.
.PP
Alternatively, when data are integers, it can also be represented as a hash where
the number of appearance (counts) of each integer is stored as key-value pairs.
.SS "mean"
.IX Subsection "mean"
Calculate mean for an array of numbers.
The input can be array, array ref, or hist (hash ref).
.SS "weightedmean"
.IX Subsection "weightedmean"
Calculate weighted mean for an array of numbers
The input should be two arrayrefs of the same length, first for values, second for weights.
.SS "median"
.IX Subsection "median"
Calculate median (50% percentile) for an array of numbers.
.SS "mad"
.IX Subsection "mad"
Median absolute deviation
.SS "var"
.IX Subsection "var"
Calculate sample variance for an array of numbers.
.SS "std"
.IX Subsection "std"
Calculate sample standard deviation.
.SS "sum_sq X, Y"
.IX Subsection "sum_sq X, Y"
Sum of product deviation to mean. When X==Y, it is sum squared deviation.
X and Y should be array ref.
.SS "corr_r X, Y"
.IX Subsection "corr_r X, Y"
Pearson correlation coefficient (r) for X and Y. X, Y should be array ref.
.PP
\&\s-1NOTE:\s0 r2 is also known as coefficient of determination.
.SS "chisq_2x2 A, B, C, D"
.IX Subsection "chisq_2x2 A, B, C, D"
Chi-squared statistics from 2x2 table. It can be used together with chi-squared
distribution to find p\-values.
.SS "quantile \s-1DATA, P\s0 [,OPTIONS]"
.IX Subsection "quantile DATA, P [,OPTIONS]"
Estimate quantile for a given sample. The input data array must be sorted.
.PP
\fIOptions\fR
.IX Subsection "Options"
.PP
The function assume that input data is not sorted and will do the sorting 
automatically. However, if the data is already sorted and performance is an issue,
you can disable sorting by \f(CW\*(C`sort=0\*(C'\fR.
.PP
\&\s-1DATA\s0 can be either array, arrayref, or hashref (as histogram). Sorting is
irrelevant for histogram.
.PP
P can be scalar or an arraref to provide multiple percentiles. In case when P
is arrayref, the output will be array or arrayref depending on context.
.PP
You can also change the quantile weighting medthod by the \f(CW\*(C`method\*(C'\fR option 
(see tech details below).
.PP
\fIDetails\fR
.IX Subsection "Details"
.PP
All sample quantiles are defined as weighted averages of
consecutive order statistics. Sample quantiles of type i are
defined by:
           Q(p) = (1 \- gamma) x[j] + gamma x[j+1],
  where (j\-m)/n <= p < (j\-m+1)/n, x[j] is the jth order statistic,
  n is the sample size, the value of gamma is a function of
  j = floor(np + m) and g = np + m \- j, and m is a constant
We used m = 1\-p is the default used by R and S (method=7).
.SS "percent \s-1DATA\s0"
.IX Subsection "percent DATA"
Input data can be array ref or hash ref (histogram).
.PP
It calculates rank percentiles for each value and returns arrayref or hashref
for each values in the original data.
.PP
By default, larger percentile corrrsponds to larger value.
If you want larger value to ranked at top (i.e, smaller rank), use \f(CW\*(C`rev=1\*(C'\fR option.
.PP
Similar to \f(CW\*(C`quantile\*(C'\fR, \f(CW\*(C`percent\*(C'\fR also assume data are not sorted (from smallest to
largest). You can disable sorting by sort=0.
.PP
By default is rank percentile \s-1RANK/SIZE.\s0 You can add psuedo counts: (\s-1RANK+P\s0)/(\s-1SIZE+P\s0).
You can give P by \f(CW\*(C`pseudo\*(C'\fR option.
.SS "index_hist \s-1HIST, II\s0"
.IX Subsection "index_hist HIST, II"
Helper function: the ii-th sorted values from the hist hash ref.
.SS "sample \s-1LIST\s0 [, \s-1OPTIONS\s0]"
.IX Subsection "sample LIST [, OPTIONS]"
Random sample elements with or without replacement from \s-1LIST.\s0
.PP
* \f(CW\*(C`nsub\*(C'\fR: use this option to sample a subset from original list. If undefined,
then all items will be sampled.
.PP
* \f(CW\*(C`replace\*(C'\fR: sample with (1) or without (0 or undef) replacement, default 1.
.PP
When sampling without replacement, nsub must be provided and less than total.
If in this case nsub == total, you should use rand_perm for random permutation.
.PP
\&\s-1NOTE:\s0 It's a good practie to set seeds by srand before running this function.
.SS "rand_perm"
.IX Subsection "rand_perm"
Return a random permutation of list.
.PP
Set seed before call this function.
.SS "permute"
.IX Subsection "permute"
The permutation of a given list. Return a iterator that generate
one permutation at one time.
.PP
Usage:
.PP
.Vb 4
\&        my $iter = permute(@b)
\&        while(@a = iter\->()) {
\&        ... do things with @a ...
\&        }
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Xueya Zhou, \f(CW\*(C`<xueyazhou at gmail.com>\*(C'\fR
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to \f(CW\*(C`bug\-utils at rt.cpan.org\*(C'\fR, or through
the web interface at <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Utils>.  I will be notified, and then you'll
automatically be notified of progress on your bug as I make changes.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc Utils::Stat
.Ve
.PP
You can also look for information at:
.IP "\(bu" 4
\&\s-1RT: CPAN\s0's request tracker (report bugs here)
.Sp
<http://rt.cpan.org/NoAuth/Bugs.html?Dist=Utils>
.IP "\(bu" 4
AnnoCPAN: Annotated \s-1CPAN\s0 documentation
.Sp
<http://annocpan.org/dist/Utils>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
<http://cpanratings.perl.org/d/Utils>
.IP "\(bu" 4
Search \s-1CPAN\s0
.Sp
<http://search.cpan.org/dist/Utils/>
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright 2018 Xueya Zhou.
.PP
This program is free software; you can redistribute it and/or modify it
under the terms of the the Artistic License (1.0). You may obtain a
copy of the full license at:
.PP
<http://www.perlfoundation.org/artistic_license_1_0>
.PP
Aggregation of this Package with a commercial distribution is always
permitted provided that the use of this Package is embedded; that is,
when no overt attempt is made to make this Package's interfaces visible
to the end user of the commercial distribution. Such use shall not be
construed as a distribution of this Package.
.PP
The name of the Copyright Holder may not be used to endorse or promote
products derived from this software without specific prior written
permission.
.PP
\&\s-1THIS PACKAGE IS PROVIDED \*(L"AS IS\*(R" AND WITHOUT ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.\s0
