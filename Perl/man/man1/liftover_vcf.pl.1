.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "LIFTOVER_VCF 1"
.TH LIFTOVER_VCF 1 "2019-11-08" "perl v5.26.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
liftover_vcf.pl \-\- Lift VCF file with genotypes.
.SH "USAGE"
.IX Header "USAGE"
liftover_vcf.pl \-in \s-1INPUT\s0 \-chain \s-1CHAIN\s0 \-seq \s-1HGSEQ\s0 \-out \s-1OUTPUT\s0
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
To lift a \s-1VCF\s0 file, there are several new complications as compared with simply liftover
over bialleli variants. The existance of multi-allelic variants, changes in ref allele
also causes collateral changes in genotype fields, etc.
.PP
The following approach was used to liftover a \s-1VCF\s0 file. We will store the genomic position of
each reference allele to a \s-1BED6\s0 file and used CrossMap to find the new genomic position and
strand. We trim the original \s-1VCF\s0 to site only, and used CrossMap to find the new position and
new reference allele. We will then compare with new reference allele with the original one.
When a variant was mapped to a different strand, we will rev comp all original alleles.
If a variant's new reference allele remains the same after accounting for strand flip, we will only
update the position and keep other \s-1VCF\s0 entries as they are.
.PP
CrossMap after v0.3.4 also account for the reference allele changes for strand flip, but it does
not post-process the indels, nor does it check if reference allele remains the same.
.SH "NOTE"
.IX Header "NOTE"
The script is only compatible with CrossMap v0.2.7. CrossMap v.2.8 failed to map variants using
\&\s-1UCSC\s0's chain files for unclear reason.
.PP
The script only support liftover sequence variants in \s-1VCF.\s0 Structual variants will be ignored.
.PP
We do not update sequence contig information in the new \s-1VCF\s0 header.
.SH "REQUIRED ARGUMENTS"
.IX Header "REQUIRED ARGUMENTS"
.IP "\-[\-]in[vcf] [=] <file>" 4
.IX Item "-[-]in[vcf] [=] <file>"
Input data file for liftover.
.IP "\-[\-]chain [=] <file>" 4
.IX Item "-[-]chain [=] <file>"
Liftover chain file. When contig/chromsome name nomenclature does no match the one used in \s-1VCF,\s0 
it still works for canonical chromosomes but results on non-chr contigs may not be accurate.
.IP "\-[\-]seq [=] <file>" 4
.IX Item "-[-]seq [=] <file>"
Reference sequence for the target genome, in \s-1FASTA\s0 format; should be indexed.
Must match the target assembly in chain file.
.Sp
This file is used to check refseq in the new assembly. We assume the original
input has been checked for refseq in the orignal assembly.
.IP "\-[\-]out[put] [=] <file>" 4
.IX Item "-[-]out[put] [=] <file>"
Output file name or prefix. The output format will be big-zipped \s-1VCF.\s0
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\-[\-]hgchr" 4
.IX Item "-[-]hgchr"
Keep only canonical human chromosome.
.IP "\-[\-]no[\-]chr" 4
.IX Item "-[-]no[-]chr"
Remove 'chr' prefix in chromosome names in the output \s-1VCF\s0 file.
.IP "\-[\-]wrkdir [=] <dir>" 4
.IX Item "-[-]wrkdir [=] <dir>"
Working directory, if not provided, will use tempdir.
.IP "\-[\-]verbose" 4
.IX Item "-[-]verbose"
Output all warning messages.
